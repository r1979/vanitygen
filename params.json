{"name":"Vanitygen","tagline":"Altcoin friendly version of Vanitygen","body":"# Vanitygen-nr1\r\nVanitygen-nr1 aims to be a user-friendly altcoin oriented version of the original vanitygen.\r\n\r\n## Changelog\r\n0.22.2 - Added support for Spice Melange\r\n\r\n0.22.1 - Added support for Unobtanium\r\n\r\n## Build instructions\r\n### Linux\r\n1. git clone https://github.com/r1979/vanitygen.git\r\n\r\n1. cd vanitygen\r\n\r\n1. make -f Makefile\r\n\r\n## Troubleshooting\r\nIf you get \"Error adding key to wallet (code -4)\" when adding a new private key to your wallet, probably your wallet is encrypted.\r\nTemoporarily unlock your wallet using the wallet console command \"walletpassphrase <passphrase> <timeout>\".\r\nThen, while the wallet is still unlocked issue the command \"importprivkey <unobtaniumprivkey> [label] [rescan=true]\".\r\n\r\n## Credits\r\nThis repository is a fork from https://github.com/samr7/vanitygen.\r\n\r\n### Original README\r\nI'd like to present a standalone command line vanity address generator \r\ncalled vanitygen.\r\n\r\nThere are plenty of quality tools to do this right now already.  So why \r\nuse vanitygen?  The main reason is that it is fast, more than an order \r\nof magnitude faster than the official bitcoin client with the vanity \r\naddress patch applied.  This is despite the fact that it runs on the \r\nCPU and does not use OpenCL or CUDA.  Vanitygen is also a bit more \r\nuser-friendly in that it provides feedback on its rate of progress and \r\nhow many keys it has checked.\r\n\r\nVanitygen is written in C, and is provided in source code form and \r\npre-built Win32 binaries.  At present, vanitygen can be built on Linux, \r\nand requires the openssl and pcre libraries.\r\n\r\nVanitygen can generate regular bitcoin addresses, namecoin addresses, \r\nand testnet addresses.\r\n\r\nVanitygen can search for exact prefixes or regular expression matches.  \r\nWhen searching for exact prefixes, vanitygen will ensure that the \r\nprefix is possible, will provide a difficulty estimate, and will run \r\nabout 30% faster.  Exact prefixes are case-sensitive by default, but \r\nmay be searched case-insensitively using the \"-i\" option.  Regular \r\nexpression patterns follow the Perl-compatible regular expression \r\nlanguage.\r\n\r\nVanitygen can accept a list of patterns to search for, either on the \r\ncommand line, or from a file or stdin using the \"-f\" option.  File \r\nsources should have one pattern per line.  When searching for N exact \r\nprefixes, performance of O(logN) can be expected, and extremely long \r\nlists of prefixes will have little effect on search rate.  Searching \r\nfor N regular expressions will have varied performance depending on the \r\ncomplexity of the expressions, but O(N) performance can be expected.\r\n\r\nBy default, vanitygen will spawn one worker thread for each CPU in your \r\nsystem.  If you wish to limit the number of worker threads created by \r\nvanitygen, use the \"-t\" option.\r\n\r\nThe example below completed quicker than average, and took about 45 sec \r\nto finish, using both cores of my aging Core 2 Duo E6600:\r\n\r\n$ ./vanitygen 1Love\r\nDifficulty: 4476342\r\n[48165 K/s][total 2080000][Prob 37.2%][50% in 21.2s]                           \r\nPattern: 1Love\r\nAddress: 1LoveRg5t2NCDLUZh6Q8ixv74M5YGVxXaN\r\nPrivkey: 5JLUmjZiirgziDmWmNprPsNx8DYwfecUNk1FQXmDPaoKB36fX1o\r\n\r\nCurrently, it is difficult to import the private key into bitcoin.  \r\nSipa's showwallet branch has a new command called \"importprivkey\" that \r\naccepts the base-58 encoded private key.  Vanitygen has been tested to \r\nwork with that version of bitcoin.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}